<?xml version="1.0" encoding="UTF-8"?>
<project name="nakade" default="build">
    
    <!-- this is the root dir of the source code of your git repo -->
    <property name="app-dir" value="app" />
    
    <!-- path to the web source code -->
    <property name="www-dir" value="/var/www/nakade-test" />
    

    <!-- version -->
    <property environment="env"/>
    <property name="pkg-name" value="${ant.project.name}${env.BUILD_NUMBER}" />
    <property name="MAJOR" value="0"/>
    <property name="MINOR" value="1"/>
    <property name="VERSION" value="${MAJOR}.${MINOR}.${env.BUILD_NUMBER}" />
    
    <!-- build project ,phpcs,phpdoc,phpcb -->
    <target name="build" 
            depends="prepare,lint,analysis,phpcs,phpdoc,phpcb,vendor,phpunit,deployment,postaction" />
  
       
    <!-- deleting build dir -->
    <target name="clean" description="cleanup previous build artifacts">
        <delete dir="${basedir}/build/package"/>
        <delete dir="${basedir}/build/code-browser"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/docs"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
    </target>
    
    <!-- create new build dir after deleting existing --> 
    <target name="prepare" depends="clean" description="prepare build dir">
        <mkdir dir="${basedir}/build/package"/>
        <mkdir dir="${basedir}/build/code-browser"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/docs"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
    </target>

     <!-- static code analysis -->
    <target name="lint" description="syntax check">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${basedir}">
                <include name="**/*.php" />
                <exclude name="**/vendor/" />
                <modified />
            </fileset>
        </apply>
    </target>
   
    <!-- combination of several tasks for code quality analysis -->
    <target name="analysis"
          description="run detection using a maximum of 2 threads.">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpdcd"/>
            <antcall target="phploc"/>
        </parallel>
    </target>

    <!-- software metrics -->
     <target name="pdepend" description="software metrics">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <!-- mess detection -->
    <target name="phpmd" description="mess detection in human readable output">
        <exec executable="phpmd">
            <arg path="${basedir}" />
            <arg value="text" />
            <arg value="${basedir}/phpmd.xml" />
        </exec>
    </target>
    
    <!-- mess detection in xml -->
    <target name="phpmd-ci"  description="mess detection xml for analysis">
        <exec executable="phpmd">
            <arg path="${basedir}" />
            <arg value="xml" />
            <arg value="${basedir}/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <!-- copy and paste detector -->
    <target name="phpcpd" description="duplicate code detection">
        <property name="phpcpd" value="/usr/bin/phpcpd" />
        <exec executable="${phpcpd}" failonerror="false">
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}" />
        </exec>
    </target>

   <!-- dead code detector -->
   <target name="phpdcd" description="dead code detection (console only)">
        <property name="phpdcd" value="/usr/bin/phpdcd" />
        <exec executable="${phpdcd}" failonerror="false">
            <arg value="--recursive" />
            <arg value="--exclude" />
            <arg value="**/vendor/" />
            <arg value="--exclude" />
            <arg value="**/tests/" />
            <arg path="${basedir}" />
        </exec>
    </target>
    
    <!-- line of codes -->
    <target name="phploc" description="measure lines of code">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${basedir}/build/logs/phploc.csv" />
            <arg path="${basedir}" />
        </exec>
    </target>

    <!-- code sniffer coding style standard -->
    <target name="phpcs" description="sniffing for coding style standard">
        <exec executable="/usr/bin/phpcs">
            <arg value="--report=checkstyle" />
            <arg value="--standard=ruleset.xml" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--extensions=php" />
            <arg value="--ignore=**/tests/, **/vendor/" />
            <arg path="${basedir}" />
        </exec>
    </target>

   <!-- inline-documentation --> 
   <target name="phpdoc" description="Generates API documentation">
       <exec executable="/usr/bin/phpdoc">
            <arg value="--directory" />
            <arg path="${basedir}" />
            <arg value="--target" />
            <arg path="${basedir}/build/docs" />
            <arg value="--filename" />
            <arg value="*.php" />
            <arg value="--quiet" />
            <arg value="--ignore" />
            <arg value="*.phtml,*autoload*,*config*,*global*,
                        */vendor/*,*/tests/*,*/data/*" />
            <arg value="--title" />
            <arg value="${ant.project.name}" />
            <arg value="--defaultpackagename" />
            <arg value="Documentation" />
            <arg value="--output" />
            <arg value="HTML:frames:earthli" />
        </exec>
    </target>

    <!-- code browser -->
    <target name="phpcb"
          description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg value="${basedir}/build/logs" />
            <arg value="--source" />
            <arg value="${basedir}" />
            <arg value="--output" />
            <arg value="${basedir}/build/code-browser" />
            <arg value="--ignore" />
            <arg value="build" />
        </exec>
    </target>
 
    <!-- ****************************************************  --> 
    <!-- prior to unit tests the vendors need to be downloaded -->
    <target name="vendor" 
            depends="composer-download,composer-self-update,vendor-install,vendor-autoload" />

    <!-- downloading composer -->
    <target name="composer-download" description="getting composer">
        <exec executable="wget" failonerror="true">
            <arg value="-nc" />
            <arg value="http://getcomposer.org/composer.phar" />
        </exec>
    </target>

    <!--composer self-update -->
    <target name="composer-self-update" description="composer self-update">
        <exec executable="php" failonerror="false">
             <arg value="${basedir}/composer.phar" />
             <arg value="self-update" />
        </exec>
    </target>
    
    <!-- vendor download -->
    <target name="vendor-install" description="composer install">
        <exec executable="php" failonerror="true">
             <arg value="${basedir}/composer.phar" />
             <arg value="install" />
        </exec>
    </target>
    
    <!-- autoloading -->
    <target name="vendor-autoload" description="performing autoload">
        <exec executable="php" failonerror="false">
             <arg value="${basedir}/composer.phar" />
             <arg value="dump-autoload" />
             <arg value="--optimize" />
        </exec>
    </target>

    <!-- ******************************************************* -->
    <!-- unit testing -->
    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec dir="${basedir}/tests" executable="phpunit" failonerror="false" />
    </target>
   
    <!-- ******************************************************* -->
    <!-- path to the versioned app code -->
    <property name="version-dir" value="${www-dir}/version" />
    
    <!-- symbolic link path -->
    <property name="link" value="${www-dir}/prod" />
    
    <!-- deployment -->
    <target name="deployment" 
            depends="package,deploy.mkdir,deploy.copy,deploy.unpack,
                    deploy.rights,deploy.group,deploy.link" />
    

    <!-- making a compressed file -->
    <target name="package" description="packaging source code">
        <tar destfile="${basedir}/build/package/${pkg-name}.tar">
            <tarfileset dir="${basedir}">
                <exclude name="**/.git/**" />
                <exclude name="**/.svn/**" />
                <exclude name="**/.idea/**" />
                <exclude name="**/nbproject/**" />
                <exclude name="**/.gitignore" />
                <exclude name="**/.gitmodule" />
                <exclude name="**/tests/**" />
                <exclude name="**/composer*" />
                <exclude name="**/build/**" />
                <exclude name="**/ruleset.xml" />
                <exclude name="**/build.xml" />
                <exclude name="**/phpmd.xml" />
                <include name="**" />
            </tarfileset>
        </tar>
        <gzip destfile="${basedir}/build/package/${pkg-name}.tar.gz" 
              src="${basedir}/build/package/${pkg-name}.tar" />
    </target>
    
    <!-- creating necessary directories -->
    <target name="deploy.mkdir" description="make deployment directories">
        <exec executable="mkdir" failonerror="true">
             <arg value="--parents" />
             <arg value="${www-dir}/tmp" />
             <arg value="--parents" />
             <arg value="${version-dir}/${env.BUILD_NUMBER}" />
        </exec>
    </target>
    
    <!-- copy package to temporary dir -->
    <target name="deploy.copy" description="copy deployment data">
        <exec executable="cp" failonerror="true">
             <arg value="${basedir}/build/package/${pkg-name}.tar.gz" />
             <arg value="${www-dir}/tmp/${pkg-name}.tar.gz" />
        </exec>
    </target>

    <!-- uncompress all files to versions directory -->    
    <target name="deploy.unpack" description="unzip deployment data">
        <gunzip src="${www-dir}/tmp/${pkg-name}.tar.gz"/>
        <untar src="${www-dir}/tmp/${pkg-name}.tar" 
               dest="${version-dir}/${env.BUILD_NUMBER}/"/>
    </target>
    
    <!-- set rights to 775 -->
    <target name="deploy.rights" description="set rights for files">
        <exec executable="chmod" failonerror="true">
             <arg value="--recursive" />
             <arg value="775" />
             <arg path="${version-dir}/${env.BUILD_NUMBER}/" />
        </exec>
    </target>
    
    <!-- set owner to www-data -->
    <target name="deploy.group" description="set owner to www-data">
        <exec executable="chgrp" failonerror="true">
            <arg value="--recursive" /> 
            <arg value="www-data" />
            <arg path="${version-dir}/${env.BUILD_NUMBER}/" />
        </exec>
    </target>
    
    <!-- set symbolic link from version --> 
    <target name="deploy.link" description="set symbolic link">
        <exec executable="ln" failonerror="true">
            <arg line="-nfs ${version-dir}/${env.BUILD_NUMBER} ${link}" />
        </exec>
    </target>


    <!-- **************************************************************** -->

    <!-- path to the cache -->
    <property name="data-cache" value="data/cache" />

    
    <target name="postaction" depends="cache.clear,deploy.clean" />

    <!-- clear cache by removing all data -->
    <target name="cache.clear" description="remove data cache files">
        <exec executable="rm">
            <arg line="-rf ${version-dir}/${env.BUILD_NUMBER}/${data-cache}/*"/> 
        </exec>
    </target>

    <!-- clean up deployment files  -->
    <target name="deploy.clean" description="remove deployment compressed files">
        <exec executable="rm">
           <arg value="${www-dir}/tmp/${pkg-name}.tar.gz"/>
           <arg value="${www-dir}/tmp/${pkg-name}.tar"/>
        </exec>
    </target>

</project>
